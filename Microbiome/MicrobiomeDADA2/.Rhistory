knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
cars
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
cars
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
cars
print("test")
plot(pressure)
1+100
x<<trees
x<<5
x<-trees
View(x)
x<-5
1:5
ls
ls()
rm(x)
sin(1)
log(1)
log(10)
log(1)
log10
log10(10)
exp(0.5)
#what number it putting to the 1/2 power?
x<-min_height
x<-min.height
x<-5
x<-_age
min_height<-5
y<-min_height
y==min_height
7<-_age
_age<-7
min_age<-7
.mass<-10
MaxLength<-11
min-length<-9
2widths<-6
celsius2kelvin<-10
2^(1:6)
ls()
ls(all.names=TRUE)
mass<-47.5
age<-122
mass<-mass*2.3
age<-age-20
age<mass
rmv(mass)
remove(mass)
remove(age)
install.packages("ggplot2")
install.packages(plyr)
intall.packages("plyr")
install.packages("plyr")
install.packages("gapminder")
setwd("/Users/allywatkins/Downloads/BioinformaticsExternalHardrive/Microbiome/MicrobiomeDADA2")
source('http://bioconductor.org/biocLite.R')
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(physeq)
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
sample_data(metadata),
tax_table(taxa))
physeq
# convert from raw to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund>0))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) &
Order!="Chloroplast" | is.na(Order) )
physeq
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file="RData/physeq.RData")
load("RData/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill")
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x /sum(x))
#barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales= "free")
plot_richness(physeq, x="body.site", color= "subject", measures=c("Observed", "Simpson", "Shannon"))
plot_richness(physeq, x="reported.antibiotic.usage", color= "body.site", measures=c("Observed", "Simpson", "Shannon"))
plot_richness(physeq, x="subject", color= "body.site", measures=c("Observed", "Simpson", "Shannon"))
#creates object called alpha with three variables, columns showing statistics for all 34 pieces of data
alpha <- estimate_richness(physeq, measures=c("Observed", "Simpson", "Shannon"))
# creates three objects to store our results
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)
#print
print(observed)
print(shannon)
print(simpson)
# p value less that 0.05 null hypothesis is rejected and data is not evenly distributed, p value greater than 0.05 fails to reject null hypothesis and data is normally distributed
# extract sample information from the physeq oject
samples <- sample_data(physeq)
#If samples is a phyloseq sample_data object, convert it to a data frame
if (class(samples) == "sample.data") {
samples <- data.frame(sample_data(samples))
}
# add a column to alpha iwht sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# extract sample information from the physeq oject
samples <- sample_data(physeq)
#If samples is a phyloseq sample_data object, convert it to a data frame
if (class(samples) == "sample_data") {
samples <- data.frame(sample_data(samples))
}
# add a column to alpha with sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data = alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data = alpha)
test_shannon <- t.test(Shannon ~ sjubject, data = alpha)
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data = alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data = alpha)
test_shannon <- t.test(Shannon ~ subject, data = alpha)
# Printing the results
print(test_observed)
print(test_simpson)
print(test_shannon)
# Wilcox test used for comparing
# Perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ reported.antibiotic.usage, data = alpha)
test_simpson <- wilcox.test(Simpson ~ reported.antibiotic.usage, data = alpha)
test_shannon <- t.test(Shannon ~ reported.antibiotic.usage, data = alpha)
# Printing the results
print(test_observed)
print(test_simpson)
print(test_shannon)
# 3 or more groups need to do anova test for normally distributed data, if not normally distributed do kruskal wallace test
kruskal.test(Simpson ~ bady.site, data=analysis)
# 3 or more groups need to do anova test for normally distributed data, if not normally distributed do kruskal wallace test
kruskal.test(Simpson ~ bady.site, data=alpha)
# 3 or more groups need to do anova test for normally distributed data, if not normally distributed do kruskal wallace test
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method="holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method="holm")
shannonanova <- aov(Shannon ~ body.site, data=alpha)
summary(shannonanova)
TukeyHSD(shannonanova)
